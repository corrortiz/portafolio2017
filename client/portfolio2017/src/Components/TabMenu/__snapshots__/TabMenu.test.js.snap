// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compare a snapshot of TabMenu 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TabMenu />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <withStyles(Tabs)
        centered={true}
        indicatorColor="primary"
        onChange={[Function]}
        scrollButtons="on"
        scrollable={true}
        textColor="primary"
        value={0}
>
        <withStyles(Tab)
                component={[Function]}
                icon={<pure(Favorite) />}
                label="Home"
                to="/"
        />
        <withStyles(Tab)
                component={[Function]}
                icon={<pure(PersonPin) />}
                label="Services"
                to="/services"
        />
        <withStyles(Tab)
                component={[Function]}
                icon={<pure(Help) />}
                label="Projects"
                to="/projects"
        />
        <withStyles(Tab)
                component={[Function]}
                icon={<pure(ThumbUp) />}
                label="Contact"
                to="/contact"
        />
</withStyles(Tabs)>,
      "className": "header__bottonNavigation",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "centered": true,
        "children": Array [
          <withStyles(Tab)
            component={[Function]}
            icon={<pure(Favorite) />}
            label="Home"
            to="/"
/>,
          <withStyles(Tab)
            component={[Function]}
            icon={<pure(PersonPin) />}
            label="Services"
            to="/services"
/>,
          <withStyles(Tab)
            component={[Function]}
            icon={<pure(Help) />}
            label="Projects"
            to="/projects"
/>,
          <withStyles(Tab)
            component={[Function]}
            icon={<pure(ThumbUp) />}
            label="Contact"
            to="/contact"
/>,
        ],
        "indicatorColor": "primary",
        "onChange": [Function],
        "scrollButtons": "on",
        "scrollable": true,
        "textColor": "primary",
        "value": 0,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "icon": <pure(Favorite) />,
            "label": "Home",
            "to": "/",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "icon": <pure(PersonPin) />,
            "label": "Services",
            "to": "/services",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "icon": <pure(Help) />,
            "label": "Projects",
            "to": "/projects",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "icon": <pure(ThumbUp) />,
            "label": "Contact",
            "to": "/contact",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <withStyles(Tabs)
          centered={true}
          indicatorColor="primary"
          onChange={[Function]}
          scrollButtons="on"
          scrollable={true}
          textColor="primary"
          value={0}
>
          <withStyles(Tab)
                    component={[Function]}
                    icon={<pure(Favorite) />}
                    label="Home"
                    to="/"
          />
          <withStyles(Tab)
                    component={[Function]}
                    icon={<pure(PersonPin) />}
                    label="Services"
                    to="/services"
          />
          <withStyles(Tab)
                    component={[Function]}
                    icon={<pure(Help) />}
                    label="Projects"
                    to="/projects"
          />
          <withStyles(Tab)
                    component={[Function]}
                    icon={<pure(ThumbUp) />}
                    label="Contact"
                    to="/contact"
          />
</withStyles(Tabs)>,
        "className": "header__bottonNavigation",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "centered": true,
          "children": Array [
            <withStyles(Tab)
              component={[Function]}
              icon={<pure(Favorite) />}
              label="Home"
              to="/"
/>,
            <withStyles(Tab)
              component={[Function]}
              icon={<pure(PersonPin) />}
              label="Services"
              to="/services"
/>,
            <withStyles(Tab)
              component={[Function]}
              icon={<pure(Help) />}
              label="Projects"
              to="/projects"
/>,
            <withStyles(Tab)
              component={[Function]}
              icon={<pure(ThumbUp) />}
              label="Contact"
              to="/contact"
/>,
          ],
          "indicatorColor": "primary",
          "onChange": [Function],
          "scrollButtons": "on",
          "scrollable": true,
          "textColor": "primary",
          "value": 0,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "icon": <pure(Favorite) />,
              "label": "Home",
              "to": "/",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "icon": <pure(PersonPin) />,
              "label": "Services",
              "to": "/services",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "icon": <pure(Help) />,
              "label": "Projects",
              "to": "/projects",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "icon": <pure(ThumbUp) />,
              "label": "Contact",
              "to": "/contact",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
